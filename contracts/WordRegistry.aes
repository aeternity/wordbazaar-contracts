// ISC License
//
// Copyright (c) 2020, aeternity developers
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
// LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
// OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.


// THIS IS NOT SECURITY AUDITED
// DO NEVER USE THIS WITHOUT SECURITY AUDIT FIRST

contract Token =
  record meta_info = { name : string, symbol : string, decimals : int }
  entrypoint meta_info : () => meta_info

contract TokenSale =
  entrypoint get_token : () => Token

contract WordRegistry =
  record state = { tokens: map(string, TokenSale)
                 , owner : address }

  stateful entrypoint init() : state =
    { tokens = {},
      owner = Call.caller }

  stateful entrypoint add_token(token_sale : TokenSale, symbol : string) : unit =
    require(!Map.member(symbol, state.tokens), "SYMBOL_ALREADY_EXISTENT")
    put(state{ tokens = state.tokens{ [symbol] = token_sale } })

  stateful entrypoint remove_token(symbol : string) : unit =
    require_owner()
    put(state{ tokens = Map.delete(symbol, state.tokens) })

  // GETTER FUNCTIONS

  entrypoint get_state() : state = state

  // INTERNAL FUNCTIONS

  function require_owner() =
    require(Call.caller == state.owner, "ONLY_OWNER_CALL_ALLOWED")
